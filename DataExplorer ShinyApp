# This is a Custom Interactive Data Explorer. Use to regress variables off a heatmap, Basic statistics of variables, and PCA analysis to explore variable profiles

library(shiny)
library(plotly)

# Define UI for application that draws a histogram
ui <- fluidPage(
    # Application title
    titlePanel("Welcome!"),

        mainPanel(
            titlePanel("Interactive Data Explorer"),

            tabsetPanel(

                tabPanel("HeatMap",
                         radioButtons(inputId = 'header',
                                      label = 'Header',
                                      choices = c('Columns have headers'='Yes',
                                                  'Columns do not have headers'='No'),
                                      selected = 'Yes'),

                         radioButtons('sep', 'Separator',
                                      c(Comma=',',
                                        Semicolon=';',
                                        Tab='\t'),
                                      ','),

                         radioButtons('quote', 'Quote',
                                      c(None='',
                                        'Double Quote'='"',
                                        'Single Quote'="'"),
                                      '"'),

                         tags$hr(),

                         fileInput('file1', 'Choose a CSV file to upload:',
                                   accept = c(
                                       'text/csv',
                                       'text/comma-separated-values',
                                       'text/tab-separated-values',
                                       'text/plain',
                                       '.csv',
                                       '.tsv'
                                   )),
                         tags$hr(),
                         checkboxInput("rowCluster", "Cluster Profile", value = TRUE),
                         checkboxInput("colCluster", "Cluster Sample", value = TRUE),

                         plotlyOutput("interactive",height = "1400px"),

                         tags$hr(),
                         p("Click Anywhere on the Heatmap Below to look at relationship between variables"),
                         plotlyOutput("scatterplot", height = "700px", width = "900px"),
                         plotlyOutput("heat", height = "500px", width = "1000px")





                ), #end tab

                tabPanel("Data Inspector",

                         p("Here is a summary of the data"),
                         tableOutput('summary'),
                         tags$hr(),
                         p("Here is the raw data from the CSV file"),
                         DT::dataTableOutput('contents')
                ), # end  tab


                tabPanel("Correlation Plots",


                         p("This plot may take a few moments to appear when analysing large datasets. You may want to exclude highly correlated variables from the PCA."),


                         plotOutput("corr_plot"),

                         tags$hr(),
                         fluidRow(
                             splitLayout(cellWidths = c("30%", "70%"),
                                         uiOutput("choose_columns_biplot"),
                                         DT::dataTableOutput('corr_tables')
                                         #tableOutput("corr_tables")
                             )


                )), # end  tab



                tabPanel("Compute PCA",

                         p("Choose the columns of your data to include in the PCA."),
                         p("Only columns containing numeric data are shown here because PCA doesn't work with non-numeric data."),
                         p("The PCA is automatically re-computed each time you change your selection."),
                         p("Observations (ie. rows) are automatically removed if they contain any missing values."),
                         p("Variables with zero variance have been automatically removed because they're not useful in a PCA."),
                         uiOutput("choose_columns_pca"),
                         tags$hr(),
                         p("Select options for the PCA computation (we are using the prcomp function here)"),
                         radioButtons(inputId = 'center',
                                      label = 'Center',
                                      choices = c('Shift variables to be zero centered'='Yes',
                                                  'Do not shift variables'='No'),
                                      selected = 'Yes'),

                         radioButtons('scale.', 'Scale',
                                      choices = c('Scale variables to have unit variance'='Yes',
                                                  'Do not scale variables'='No'),
                                      selected = 'Yes')

                ), # end  tab



                tabPanel("PCA Plots",
                         h2("Scree plot"),
                         p("The scree plot shows the variances of each PC, and the cumulative variance explained by each PC (in %) "),
                         plotOutput("plot2", height = "300px"),
                         tags$hr(),
                         h2("PCA Bi-Plot: zoom and select points"),
                         p("Select the grouping variable."),

                         uiOutput("the_grouping_variable"),
                         tags$hr(),
                         p("Select the PCs to plot"),
                         uiOutput("the_pcs_to_plot_x"),
                         uiOutput("the_pcs_to_plot_y"),
                         tags$hr(),

                         p("Click and drag on the first plot below to zoom into a region on the plot. Or you can go directly to the second plot below to select points to get more information about them."),
                         p("Then select points on zoomed plot below to get more information about the points."),
                         p("You can click on the 'Compute PCA' tab at any time to change the variables included in the PCA, and then come back to this tab and the plots will automatically update."),
                         p("Click and drag on the plot below to select points, and inspect the table of selected points below"),
                         fluidRow(
                             splitLayout(cellWidths = c("50%", "50%"),

                                         plotOutput ("z_plot1", height = 400,
                                                     brush = brushOpts(
                                                         id = "z_plot1Brush",
                                                         resetOnNew = TRUE)),

                                         plotOutput("z_plot2", height = 400,
                                                    brush = brushOpts(
                                                        id = "plot_brush_after_zoom",
                                                        resetOnNew = TRUE))
                             )),

                         tags$hr(),
                         p("Details of the brushed points"),
                         tableOutput("brush_info_after_zoom")
                ), # end  tab

                tabPanel("PCA output",
                         verbatimTextOutput("pca_details")

                ) # end  tab

)))




# global items

# check if pkgs are installed already, if not, install automatically:
# (http://stackoverflow.com/a/4090208/1036500)
list.of.packages <- c("ggplot2",
                      "DT",
                      "GGally",
                      "psych",
                      "Hmisc",
                      "MASS",
                      "heatmaply")

new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

# load all these
lapply(list.of.packages, require, character.only = TRUE)

server <- function(input, output,session) {

    # read the CSV
    the_data_fn <- reactive({
        inFile <- input$file1
        if (is.null(inFile)) return(NULL)
        the_data <-   read.csv(inFile$datapath, header = (input$header == "Yes"),
                               sep = input$sep, quote = input$quote, stringsAsFactors=FALSE)
        return(the_data)
    })


    # Heatmap
    interactiveHeatmap <- reactive({
        genexp <- the_data_fn()
        genexp_df <- as.data.frame(genexp)
        genexp_df <- genexp_df[,-c(2)]
        names_genexp_df <- genexp_df[,1]
        n <- NROW(names_genexp_df)
        genexp_df_mat <- data.matrix(genexp_df[-1])
        k <- NCOL(genexp_df_mat)
        row.names(genexp_df_mat) <- names_genexp_df
        genexp_df_mat = t(genexp_df_mat)
        heatmaply(genexp_df_mat,scale = "row" ,Rowv = input$rowCluster, Colv= input$colCluster,
                  scale_fill_gradient_fun = ggplot2::scale_fill_gradient2(
                      low = "blue",
                      high = "red"
                  ))

    })


    output$interactive <- renderPlotly({
        interactiveHeatmap()
    })

    output$heat <- renderPlotly({
        the_data_fn = the_data_fn()
        the_data_fn = the_data_fn[,-c(1,2)]
        correlation <- round(cor(the_data_fn), 3)
        plot_ly(source = "heat_plot") %>%
            add_heatmap(
                x = names(the_data_fn),
                y = names(the_data_fn),
                z = correlation
            )
    })

    output$scatterplot <- renderPlotly({
        # if there is no click data, render nothing!
        clickData <- event_data("plotly_click", source = "heat_plot")
        if (is.null(clickData)) return(NULL)

        # Obtain the clicked x/y variables and fit linear model
        the_data_fn = the_data_fn()
        vars <- c(clickData[["x"]], clickData[["y"]])
        d <- setNames(the_data_fn[vars], c("x", "y"))
        yhat <- fitted(lm(y ~ x, data = d))

        # scatterplot with fitted line
        plot_ly(d, x = ~x) %>%
            add_markers(y = ~y) %>%
            add_lines(y = ~yhat) %>%
            layout(
                xaxis = list(title = clickData[["x"]]),
                yaxis = list(title = clickData[["y"]]),
                showlegend = FALSE
            )
    })



    # display a table of the CSV contents
    output$contents <-  DT::renderDataTable({
        #
        the_data_fn()
    })

    # display a summary of the CSV contents
    output$summary <-  renderTable({
        the_data <- the_data_fn()
        psych::describe(the_data)
    })

    # Check boxes to choose columns
    output$choose_columns_biplot <- renderUI({

        the_data <- the_data_fn()

        colnames <- names(the_data)

        # Create the checkboxes and select them all by default
        checkboxGroupInput("columns_biplot", "Choose Variables",
                           choices  = colnames,
                           selected = colnames[1:5])
    })

    # corr plot
    output$corr_plot <- renderPlot({
        the_data <- the_data_fn()
        # Keep the selected columns
        columns_biplot <-    input$columns_biplot
        the_data_subset_biplot <- the_data[, columns_biplot, drop = FALSE]
        ggpairs(the_data_subset_biplot)
    })



    # corr tables
    output$corr_tables <- DT::renderDataTable({
        the_data <- the_data_fn()
        # we only want to show numeric cols
        the_data_num <- the_data[,sapply(the_data,is.numeric)]
        # exclude cols with zero variance
        the_data_num <- the_data_num[,!apply(the_data_num, MARGIN = 2, function(x) max(x, na.rm = TRUE) == min(x, na.rm = TRUE))]


        res <- Hmisc::rcorr(as.matrix(the_data_num))
        cormat <- res$r
        pmat <- res$P
        ut <- upper.tri(cormat)
        df <- data.frame(
            row = rownames(cormat)[row(cormat)[ut]],
            column = rownames(cormat)[col(cormat)[ut]],
            cor  = (cormat)[ut],
            p = pmat[ut]
        )
        with(df, df[order(-cor), ])

    })




    # Check boxes to choose columns
    output$choose_columns_pca <- renderUI({

        the_data <- the_data_fn()

        # Get the data set with the appropriate name

        # we only want to show numeric cols
        the_data_num <- na.omit(the_data[,sapply(the_data,is.numeric)])
        # exclude cols with zero variance
        the_data_num <- the_data_num[,!apply(the_data_num, MARGIN = 2, function(x) max(x, na.rm = TRUE) == min(x, na.rm = TRUE))]


        colnames <- names(the_data_num)

        # Create the checkboxes and select them all by default
        checkboxGroupInput("columns", "Choose columns",
                           choices  = colnames,
                           selected = colnames)
    })

    # choose a grouping variable
    output$the_grouping_variable <- renderUI({
        the_data <- the_data_fn()


        # for grouping we want to see only cols where the number of unique values are less than
        # 10% the number of observations
        grouping_cols <- sapply(seq(1, ncol(the_data)), function(i) length(unique(the_data[,i])) < nrow(the_data))

        the_data_group_cols <- the_data[, grouping_cols, drop = FALSE]
        # drop down selection
        selectInput(inputId = "the_grouping_variable",
                    label = "Grouping variable:",
                    choices=c("None", names(the_data_group_cols)))

    })


    pca_objects <- reactive({
        # Keep the selected columns
        columns <-    input$columns
        the_data <- na.omit(the_data_fn())
        the_data_subset <- na.omit(the_data[, columns, drop = FALSE])

        # from http://rpubs.com/sinhrks/plot_pca
        pca_output <- prcomp(na.omit(the_data_subset),
                             center = (input$center == 'Yes'),
                             scale. = (input$scale. == 'Yes'))
        # data.frame of PCs
        pcs_df <- cbind(the_data, pca_output$x)

        return(list(the_data = the_data,
                    the_data_subset = the_data_subset,
                    pca_output = pca_output,
                    pcs_df = pcs_df))

    })

    output$the_pcs_to_plot_x <- renderUI({
        pca_output <- pca_objects()$pca_output$x

        # drop down selection
        selectInput(inputId = "the_pcs_to_plot_x",
                    label = "X axis:",
                    choices= colnames(pca_output),
                    selected = 'PC1')
    })

    output$the_pcs_to_plot_y <- renderUI({
        pca_output <- pca_objects()$pca_output$x

        # drop down selection
        selectInput(inputId = "the_pcs_to_plot_y",
                    label = "Y axis:",
                    choices= colnames(pca_output),
                    selected = 'PC2')
    })



    output$plot2 <- renderPlot({
        pca_output <- pca_objects()$pca_output
        eig = (pca_output$sdev)^2
        variance <- eig*100/sum(eig)
        cumvar <- paste(round(cumsum(variance),1), "%")
        eig_df <- data.frame(eig = eig,
                             PCs = colnames(pca_output$x),
                             cumvar =  cumvar)
        ggplot(eig_df, aes(reorder(PCs, -eig), eig)) +
            geom_bar(stat = "identity", fill = "white", colour = "black") +
            geom_text(label = cumvar, size = 4,
                      vjust=-0.4) +
            theme_bw(base_size = 14) +
            xlab("PC") +
            ylab("Variances") +
            ylim(0,(max(eig_df$eig) * 1.1))
    })


    # PC plot
    pca_biplot <- reactive({
        pcs_df <- pca_objects()$pcs_df
        pca_output <-  pca_objects()$pca_output

        var_expl_x <- round(100 * pca_output$sdev[as.numeric(gsub("[^0-9]", "", input$the_pcs_to_plot_x))]^2/sum(pca_output$sdev^2), 1)
        var_expl_y <- round(100 * pca_output$sdev[as.numeric(gsub("[^0-9]", "", input$the_pcs_to_plot_y))]^2/sum(pca_output$sdev^2), 1)
        labels <- rownames(pca_output$x)
        grouping <- input$the_grouping_variable

        if(grouping == 'None'){
            # plot without grouping variable
            pc_plot_no_groups  <- ggplot(pcs_df,
                                         aes_string(input$the_pcs_to_plot_x,
                                                    input$the_pcs_to_plot_y
                                         )) +


                geom_text(aes(label = labels),  size = 5) +
                theme_bw(base_size = 14) +
                coord_equal() +
                xlab(paste0(input$the_pcs_to_plot_x, " (", var_expl_x, "% explained variance)")) +
                ylab(paste0(input$the_pcs_to_plot_y, " (", var_expl_y, "% explained variance)"))
            # the plot
            pc_plot_no_groups


        } else {
            # plot with grouping variable

            pcs_df$fill_ <-  as.character(pcs_df[, grouping, drop = TRUE])
            pc_plot_groups  <- ggplot(pcs_df, aes_string(input$the_pcs_to_plot_x,
                                                         input$the_pcs_to_plot_y,
                                                         fill = 'fill_',
                                                         colour = 'fill_'
            )) +
                stat_ellipse(geom = "polygon", alpha = 0.1) +

                geom_text(aes(label = labels),  size = 5) +
                theme_bw(base_size = 14) +
                scale_colour_discrete(guide = FALSE) +
                guides(fill = guide_legend(title = "groups")) +
                theme(legend.position="top") +
                coord_equal() +
                xlab(paste0(input$the_pcs_to_plot_x, " (", var_expl_x, "% explained variance)")) +
                ylab(paste0(input$the_pcs_to_plot_y, " (", var_expl_y, "% explained variance)"))
            # the plot
            pc_plot_groups
        }


    })

    output$brush_info <- renderTable({
        # the brushing function
        brushedPoints(pca_objects()$pcs_df, input$plot_brush)
    })


    # for zooming
    output$z_plot1 <- renderPlot({

        pca_biplot()

    })

    # zoom ranges
    zooming <- reactiveValues(x = NULL, y = NULL)

    observe({
        brush <- input$z_plot1Brush
        if (!is.null(brush)) {
            zooming$x <- c(brush$xmin, brush$xmax)
            zooming$y <- c(brush$ymin, brush$ymax)
        }
        else {
            zooming$x <- NULL
            zooming$y <- NULL
        }
    })


    # for zooming
    output$z_plot2 <- renderPlot({

        pca_biplot() + coord_cartesian(xlim = zooming$x, ylim = zooming$y)


    })

    output$brush_info_after_zoom <- renderTable({
        # the brushing function
        brushedPoints(pca_objects()$pcs_df, input$plot_brush_after_zoom)
    })

    output$pca_details <- renderPrint({
        #
        print(pca_objects()$pca_output$rotation)
        summary(pca_objects()$pca_output)

    })



}


shinyApp(ui = ui, server = server)
